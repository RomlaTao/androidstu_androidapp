package com.example.heath_android.ui.schedule;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.heath_android.R;
import com.example.heath_android.data.model.schedule.DayEvent;
import com.example.heath_android.data.model.schedule.WorkoutSchedulesResponse;
import com.example.heath_android.data.model.schedule.MealSchedulesResponse;
import com.example.heath_android.data.model.schedule.Exercise;
import com.example.heath_android.data.model.schedule.Food;
import com.example.heath_android.ui.schedule.adapter.DayContentAdapter;
import com.example.heath_android.ui.schedule.adapter.WeekDayAdapter;
import com.example.heath_android.ui.home.HomeActivity;
import com.example.heath_android.ui.profile.ProfileActivity;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.bottomnavigation.BottomNavigationView;

public class ScheduleActivity extends AppCompatActivity {
    
    private ScheduleViewModel viewModel;
    
    // UI Components
    private TextView tvCalendar;
    private Spinner spMonth;
    private RecyclerView rvWeekDays, rvContent;
    private FloatingActionButton fabAddEvent;
    private BottomNavigationView bottomNavigation;
    
    // Adapters
    private WeekDayAdapter weekDayAdapter;
    private DayContentAdapter dayContentAdapter;
    private ArrayAdapter<String> monthAdapter;
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_schedule);
        
        // Apply window insets
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });
        
        initViewModel();
        initViews();
        setupAdapters();
        setupObservers();
        setupClickListeners();
        setupBottomNavigation();
    }
    
    private void initViewModel() {
        // S·ª≠ d·ª•ng constructor m·ªõi v·ªõi Context ƒë·ªÉ t·ª± ƒë·ªông load authentication
        viewModel = new ScheduleViewModel(this);
        
        // Ki·ªÉm tra authentication status khi kh·ªüi t·∫°o
        if (!viewModel.isAuthenticated()) {
            Toast.makeText(this, "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng l·ªãch", Toast.LENGTH_LONG).show();
            // TODO: Redirect to login activity n·∫øu c·∫ßn
            // Intent intent = new Intent(this, LoginActivity.class);
            // startActivity(intent);
            // finish();
            return;
        }
        
        // Load initial data n·∫øu ƒë√£ authenticated
        loadInitialData();
    }
    
    /**
     * Load d·ªØ li·ªáu ban ƒë·∫ßu khi activity kh·ªüi t·∫°o
     */
    private void loadInitialData() {
        // Load base data
        viewModel.loadAllWorkouts();
        viewModel.loadAllMeals();
        
        // Load user's schedules ƒë·ªÉ c√≥ th·ªÉ browse
        viewModel.browseWorkoutSchedules();
        viewModel.browseMealSchedules();
        
        // Load events cho ng√†y hi·ªán t·∫°i
        viewModel.loadScheduleEventsForDate(viewModel.getCurrentDateString());
    }
    
    private void initViews() {
        tvCalendar = findViewById(R.id.tvCalendar);
        spMonth = findViewById(R.id.spMonth);
        rvWeekDays = findViewById(R.id.rvWeekDays);
        rvContent = findViewById(R.id.rvContent);
        fabAddEvent = findViewById(R.id.fabAddEvent);
        bottomNavigation = findViewById(R.id.bottom_navigation);
        
        // Initialize new UI components
        initializeNewUIComponents();
    }
    
    /**
     * Initialize c√°c UI components m·ªõi ƒë∆∞·ª£c th√™m v√†o layout
     */
    private void initializeNewUIComponents() {
        // User info components
        LinearLayout llUserInfo = findViewById(R.id.llUserInfo);
        ImageView ivAuthStatus = findViewById(R.id.ivAuthStatus);
        
        // Selected schedule components
        LinearLayout llSelectedSchedule = findViewById(R.id.llSelectedSchedule);
        TextView tvSelectedScheduleName = findViewById(R.id.tvSelectedScheduleName);
        TextView tvSelectedSchedulePeriod = findViewById(R.id.tvSelectedSchedulePeriod);
        ImageButton btnClearSelection = findViewById(R.id.btnClearSelection);
        
        // Calendar navigation components
        ImageButton btnPrevWeek = findViewById(R.id.btnPrevWeek);
        TextView tvCurrentWeek = findViewById(R.id.tvCurrentWeek);
        ImageButton btnNextWeek = findViewById(R.id.btnNextWeek);
        ImageButton btnYearPicker = findViewById(R.id.btnYearPicker);
        
        // Loading and empty state
        ProgressBar progressBar = findViewById(R.id.progressBar);
        LinearLayout llEmptyState = findViewById(R.id.llEmptyState);
        
        // Setup click listeners cho c√°c components m·ªõi
        setupNewClickListeners(btnClearSelection, btnPrevWeek, btnNextWeek, btnYearPicker);
        
        // Setup observers cho authentication v√† selection state
        setupUIStateObservers(llUserInfo, ivAuthStatus, llSelectedSchedule,
                             tvSelectedScheduleName, tvSelectedSchedulePeriod, progressBar, llEmptyState);
    }
    
    /**
     * Setup click listeners cho c√°c UI components m·ªõi
     */
    private void setupNewClickListeners(ImageButton btnClearSelection, ImageButton btnPrevWeek, 
                                      ImageButton btnNextWeek, ImageButton btnYearPicker) {
        
        // Clear selection button
        btnClearSelection.setOnClickListener(v -> {
            viewModel.clearWorkoutScheduleSelection();
            viewModel.clearMealScheduleSelection();
            Toast.makeText(this, "ƒê√£ b·ªè ch·ªçn l·ªãch", Toast.LENGTH_SHORT).show();
        });
        
        // Week navigation
        btnPrevWeek.setOnClickListener(v -> viewModel.previousWeek());
        btnNextWeek.setOnClickListener(v -> viewModel.nextWeek());
        
        // Year picker
        btnYearPicker.setOnClickListener(v -> showYearPickerDialog());
    }
    
    /**
     * Setup observers cho UI state
     */
    private void setupUIStateObservers(LinearLayout llUserInfo, ImageView ivAuthStatus,
                                     LinearLayout llSelectedSchedule, TextView tvSelectedScheduleName, 
                                     TextView tvSelectedSchedulePeriod, ProgressBar progressBar, 
                                     LinearLayout llEmptyState) {
        
        // Observe authentication state
        if (viewModel.isAuthenticated()) {
            String[] userInfo = viewModel.getCurrentUserInfo();
            if (userInfo != null && userInfo.length >= 2) {
                llUserInfo.setVisibility(View.VISIBLE);
                ivAuthStatus.setImageResource(android.R.drawable.presence_online);
            }
        } else {
            llUserInfo.setVisibility(View.GONE);
        }
        
        // Observe selected workout schedule
        viewModel.getSelectedWorkoutSchedule().observe(this, schedule -> {
            if (schedule != null) {
                llSelectedSchedule.setVisibility(View.VISIBLE);
                tvSelectedScheduleName.setText("üèãÔ∏è " + schedule.getName());
                tvSelectedSchedulePeriod.setText(schedule.getStartDate() + " ‚Üí " + schedule.getEndDate());
                llEmptyState.setVisibility(View.GONE);
            }
        });
        
        // Observe selected meal schedule
        viewModel.getSelectedMealSchedule().observe(this, schedule -> {
            if (schedule != null) {
                llSelectedSchedule.setVisibility(View.VISIBLE);
                tvSelectedScheduleName.setText("üçΩÔ∏è " + schedule.getName());
                tvSelectedSchedulePeriod.setText(schedule.getStartDate() + " ‚Üí " + schedule.getEndDate());
                llEmptyState.setVisibility(View.GONE);
            }
        });
        
        // Show empty state khi kh√¥ng c√≥ schedule n√†o ƒë∆∞·ª£c ch·ªçn
        // Observe c·∫£ 2 schedule types ƒë·ªÉ update UI state
        observeScheduleSelectionState(llSelectedSchedule, llEmptyState);
        
        // Observe loading state  
        viewModel.getIsLoading().observe(this, isLoading -> {
            progressBar.setVisibility(isLoading != null && isLoading ? View.VISIBLE : View.GONE);
        });
    }
    
    /**
     * Dialog ch·ªçn nƒÉm
     */
    private void showYearPickerDialog() {
        int currentYear = viewModel.getSelectedYear().getValue() != null ? 
                         viewModel.getSelectedYear().getValue() : 2024;
        
        String[] years = new String[10];
        for (int i = 0; i < 10; i++) {
            years[i] = String.valueOf(currentYear - 5 + i);
        }
        
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Ch·ªçn nƒÉm");
        builder.setItems(years, (dialog, which) -> {
            int selectedYear = currentYear - 5 + which;
            viewModel.selectYear(selectedYear);
        });
        
        builder.show();
    }
    
    /**
     * Observe schedule selection state ƒë·ªÉ update UI visibility
     */
    private void observeScheduleSelectionState(LinearLayout llSelectedSchedule, LinearLayout llEmptyState) {
        // Combine observers ƒë·ªÉ track c·∫£ workout v√† meal selection
        viewModel.getSelectedWorkoutSchedule().observe(this, workoutSchedule -> {
            updateScheduleSelectionUI(workoutSchedule, 
                                    viewModel.getSelectedMealSchedule().getValue(),
                                    llSelectedSchedule, llEmptyState);
        });
        
        viewModel.getSelectedMealSchedule().observe(this, mealSchedule -> {
            updateScheduleSelectionUI(viewModel.getSelectedWorkoutSchedule().getValue(),
                                    mealSchedule,
                                    llSelectedSchedule, llEmptyState);
        });
    }
    
    /**
     * Update UI d·ª±a tr√™n schedule selection state
     */
    private void updateScheduleSelectionUI(WorkoutSchedulesResponse workoutSchedule,
                                         MealSchedulesResponse mealSchedule,
                                         LinearLayout llSelectedSchedule,
                                         LinearLayout llEmptyState) {
        boolean hasSelection = (workoutSchedule != null) || (mealSchedule != null);
        
        if (hasSelection) {
            llSelectedSchedule.setVisibility(View.VISIBLE);
            llEmptyState.setVisibility(View.GONE);
        } else {
            llSelectedSchedule.setVisibility(View.GONE);
            llEmptyState.setVisibility(View.VISIBLE);
        }
    }
    
    private void setupAdapters() {
        // Week days adapter
        weekDayAdapter = new WeekDayAdapter();
        weekDayAdapter.setOnDayClickListener(this::onDayClicked);
        rvWeekDays.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));
        rvWeekDays.setAdapter(weekDayAdapter);
        
        // Day content adapter
        dayContentAdapter = new DayContentAdapter();
        dayContentAdapter.setOnEventClickListener(this::onEventClicked);
        dayContentAdapter.setOnEventLongClickListener(this::onEventLongClicked);
        rvContent.setLayoutManager(new LinearLayoutManager(this));
        rvContent.setAdapter(dayContentAdapter);
        
        // Month spinner adapter
        monthAdapter = new ArrayAdapter<>(this, R.layout.spinner_item);
        monthAdapter.setDropDownViewResource(R.layout.spinner_dropdown_item);
        spMonth.setAdapter(monthAdapter);
    }
    
    private void setupObservers() {
        // Observe months list
        viewModel.getMonthsList().observe(this, months -> {
            if (months != null) {
                monthAdapter.clear();
                monthAdapter.addAll(months);
                monthAdapter.notifyDataSetChanged();
            }
        });
        
        // Observe selected month
        viewModel.getSelectedMonth().observe(this, month -> {
            if (month != null && spMonth != null) {
                spMonth.setSelection(month);
            }
        });
        
        // Observe week days
        viewModel.getWeekDays().observe(this, weekDays -> {
            if (weekDays != null) {
                weekDayAdapter.updateDays(weekDays);
            }
        });
        
        // Observe schedule events (converted for UI)
        viewModel.getScheduleEvents().observe(this, events -> {
            if (events != null) {
                dayContentAdapter.updateEvents(events);
            }
        });
        
        // Observe current selected date
        viewModel.getCurrentSelectedDate().observe(this, date -> {
            if (date != null) {
                // Update UI to reflect selected date
                updateSelectedDateUI(date);
                
                // Update current week text
                TextView tvCurrentWeek = findViewById(R.id.tvCurrentWeek);
                if (tvCurrentWeek != null) {
                    tvCurrentWeek.setText(viewModel.getCurrentWeekText());
                }
            }
        });
        
        // ==================== NEW API DATA OBSERVERS ====================
        
        // Observe workout responses
        viewModel.getWorkoutResponses().observe(this, workouts -> {
            if (workouts != null) {
                // TODO: Update workout list in UI if needed
                // Can be used for dropdown/spinner in create scheduled workout dialog
            }
        });
        
        // Observe meal responses
        viewModel.getMealResponses().observe(this, meals -> {
            if (meals != null) {
                // TODO: Update meal list in UI if needed
                // Can be used for dropdown/spinner in create scheduled meal dialog
            }
        });
        
        // Observe workout schedules - c·∫≠p nh·∫≠t danh s√°ch ƒë·ªÉ browse
        viewModel.getWorkoutSchedules().observe(this, schedules -> {
            if (schedules != null && !schedules.isEmpty()) {
                // Hi·ªÉn th·ªã th√¥ng b√°o c√≥ schedules m·ªõi ƒë∆∞·ª£c load
                // UI s·∫Ω t·ª± c·∫≠p nh·∫≠t khi user m·ªü browse dialog
            }
        });
        
        // Observe meal schedules - c·∫≠p nh·∫≠t danh s√°ch ƒë·ªÉ browse
        viewModel.getMealSchedules().observe(this, schedules -> {
            if (schedules != null && !schedules.isEmpty()) {
                // Hi·ªÉn th·ªã th√¥ng b√°o c√≥ schedules m·ªõi ƒë∆∞·ª£c load
                // UI s·∫Ω t·ª± c·∫≠p nh·∫≠t khi user m·ªü browse dialog
            }
        });
        
        // Observe selected workout schedule
        viewModel.getSelectedWorkoutSchedule().observe(this, schedule -> {
            if (schedule != null) {
                // Show selected workout schedule info in UI
                // Enable operations on this schedule
            }
        });
        
        // Observe selected meal schedule
        viewModel.getSelectedMealSchedule().observe(this, schedule -> {
            if (schedule != null) {
                // Show selected meal schedule info in UI
                // Enable operations on this schedule
            }
        });
        
        // Observe scheduled workouts
        viewModel.getScheduledWorkouts().observe(this, scheduledWorkouts -> {
            if (scheduledWorkouts != null) {
                // Auto refresh current date events khi c√≥ scheduled workouts m·ªõi
                viewModel.refreshCurrentDateEvents();
            }
        });
        
        // Observe scheduled meals
        viewModel.getScheduledMeals().observe(this, scheduledMeals -> {
            if (scheduledMeals != null) {
                // Auto refresh current date events khi c√≥ scheduled meals m·ªõi
                viewModel.refreshCurrentDateEvents();
            }
        });
        
        // ==================== STATUS OBSERVERS ====================
        
        // Observe loading state
        viewModel.getIsLoading().observe(this, isLoading -> {
            // Show/hide loading indicator
            // You can implement a progress bar here
            if (isLoading != null && isLoading) {
                // Show loading
            } else {
                // Hide loading
            }
        });
        
        // Observe error messages
        viewModel.getErrorMessage().observe(this, errorMessage -> {
            if (errorMessage != null && !errorMessage.isEmpty()) {
                Toast.makeText(this, errorMessage, Toast.LENGTH_SHORT).show();
            }
        });
    }
    
    private void setupClickListeners() {
        // Month spinner listener
        spMonth.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                viewModel.selectMonth(position);
            }
            
            @Override
            public void onNothingSelected(AdapterView<?> parent) {}
        });
        
        // FAB click listener
        fabAddEvent.setOnClickListener(v -> showEventTypeDialog());
    }
    
    private void onDayClicked(int dayIndex, String day) {
        // Calculate the actual date based on selected month/year and day
        Integer month = viewModel.getSelectedMonth().getValue();
        Integer year = viewModel.getSelectedYear().getValue();
        
        if (month != null && year != null) {
            String date = String.format("%04d-%02d-%02d", year, month + 1, Integer.parseInt(day));
            viewModel.selectDate(date);
            
            // Refresh schedules data ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ data m·ªõi nh·∫•t
            if (viewModel.isAuthenticated()) {
                viewModel.loadUserWorkoutSchedules();
                viewModel.loadUserMealSchedules();
            }
        }
    }
    
    private void onEventClicked(DayEvent event) {
        // Show event details or edit dialog
        showEditEventDialog(event);
    }
    
    private boolean onEventLongClicked(DayEvent event) {
        // Show delete confirmation dialog
        showDeleteEventDialog(event);
        return true;
    }
    
    private void updateSelectedDateUI(String date) {
        // Update any UI elements that show the selected date
        // You can highlight the selected day in the week view
        weekDayAdapter.setSelectedDate(date);
    }
    
    /**
     * H√†m showEventTypeDialog() hi·ªÉn th·ªã dialog ch·ªçn lo·∫°i l·ªãch ch√≠nh (L·ªãch ƒÉn ho·∫∑c L·ªãch t·∫≠p)
     * Theo thi·∫øt k·∫ø backend t√°ch bi·ªát gi·ªØa Workout service v√† Meal service
     * 
     * Updated: Bao g·ªìm c·∫£ schedule browsing workflow
     */
    private void showEventTypeDialog() {
        // T·∫°o dialog v·ªõi nhi·ªÅu l·ª±a ch·ªçn h∆°n
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Qu·∫£n l√Ω l·ªãch tr√¨nh");
        
        String[] options = {
            "üìã Duy·ªát l·ªãch t·∫≠p luy·ªán", 
            "üçΩÔ∏è Duy·ªát l·ªãch ƒÉn u·ªëng",
            "‚ûï T·∫°o m·ªõi l·ªãch t·∫≠p",
            "‚ûï T·∫°o m·ªõi l·ªãch ƒÉn", 
            "üèãÔ∏è T·∫°o b√†i t·∫≠p",
            "üç¥ T·∫°o th·ª±c ƒë∆°n",
            "üìÖ Th√™m event nhanh"
        };
        
        builder.setItems(options, (dialog, which) -> {
            switch (which) {
                case 0: // Duy·ªát l·ªãch t·∫≠p luy·ªán
                    showWorkoutScheduleBrowseDialog();
                    break;
                case 1: // Duy·ªát l·ªãch ƒÉn u·ªëng
                    showMealScheduleBrowseDialog();
                    break;
                case 2: // T·∫°o m·ªõi l·ªãch t·∫≠p
                    showCreateWorkoutScheduleDialog();
                    break;
                case 3: // T·∫°o m·ªõi l·ªãch ƒÉn
                    showCreateMealScheduleDialog();
                    break;
                case 4: // T·∫°o b√†i t·∫≠p
                    showCreateWorkoutDialog();
                    break;
                case 5: // T·∫°o th·ª±c ƒë∆°n
                    showCreateMealDialog();
                    break;
                case 6: // Th√™m event nhanh (legacy)
                    showQuickEventDialog();
                    break;
            }
        });
        
        builder.setNegativeButton("H·ªßy", null);
        builder.show();
    }
    
    /**
     * Dialog ƒë·ªÉ browse v√† ch·ªçn workout schedules
     */
    private void showWorkoutScheduleBrowseDialog() {
        if (!viewModel.isAuthenticated()) {
            Toast.makeText(this, "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem l·ªãch t·∫≠p", Toast.LENGTH_SHORT).show();
            return;
        }
        
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("L·ªãch t·∫≠p luy·ªán c·ªßa b·∫°n");
        
        // Refresh schedules list
        viewModel.browseWorkoutSchedules();
        
        // TODO: Implement proper list dialog with actual schedule data
        // For now, show simple options
        String[] options = {
            "üìã Xem t·∫•t c·∫£ l·ªãch t·∫≠p",
            "‚ûï T·∫°o l·ªãch t·∫≠p m·ªõi", 
            "üèãÔ∏è L√™n l·ªãch bu·ªïi t·∫≠p",
            "üìä Th·ªëng k√™"
        };
        
        builder.setItems(options, (dialog, which) -> {
            switch (which) {
                case 0:
                    showWorkoutScheduleListDialog();
                    break;
                case 1:
                    showCreateWorkoutScheduleDialog();
                    break;
                case 2:
                    showCreateScheduledWorkoutDialog();
                    break;
                case 3:
                    Toast.makeText(this, "Ch·ª©c nƒÉng th·ªëng k√™ ƒëang ph√°t tri·ªÉn", Toast.LENGTH_SHORT).show();
                    break;
            }
        });
        
        builder.setNegativeButton("Quay l·∫°i", (dialog, which) -> showEventTypeDialog());
        builder.show();
    }
    
    /**
     * Dialog ƒë·ªÉ browse v√† ch·ªçn meal schedules
     */
    private void showMealScheduleBrowseDialog() {
        if (!viewModel.isAuthenticated()) {
            Toast.makeText(this, "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem l·ªãch ƒÉn", Toast.LENGTH_SHORT).show();
            return;
        }
        
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("L·ªãch ƒÉn u·ªëng c·ªßa b·∫°n");
        
        // Refresh schedules list
        viewModel.browseMealSchedules();
        
        // TODO: Implement proper list dialog with actual schedule data
        String[] options = {
            "üìã Xem t·∫•t c·∫£ l·ªãch ƒÉn",
            "‚ûï T·∫°o l·ªãch ƒÉn m·ªõi",
            "üçΩÔ∏è L√™n l·ªãch b·ªØa ƒÉn", 
            "üìä Th·ªëng k√™ dinh d∆∞·ª°ng"
        };
        
        builder.setItems(options, (dialog, which) -> {
            switch (which) {
                case 0:
                    showMealScheduleListDialog();
                    break;
                case 1:
                    showCreateMealScheduleDialog();
                    break;
                case 2:
                    showCreateScheduledMealDialog();
                    break;
                case 3:
                    Toast.makeText(this, "Ch·ª©c nƒÉng th·ªëng k√™ ƒëang ph√°t tri·ªÉn", Toast.LENGTH_SHORT).show();
                    break;
            }
        });
        
        builder.setNegativeButton("Quay l·∫°i", (dialog, which) -> showEventTypeDialog());
        builder.show();
    }
    
    /**
     * Quick event dialog for simple events (legacy support)
     */
    private void showQuickEventDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Th√™m event nhanh");
        
        String[] options = {"üèãÔ∏è Bu·ªïi t·∫≠p", "üçΩÔ∏è B·ªØa ƒÉn"};
        
        builder.setItems(options, (dialog, which) -> {
            switch (which) {
                case 0:
                    showAddWorkoutEventDialog();
                    break;
                case 1:
                    showAddMealEventDialog();
                    break;
            }
        });
        
        builder.setNegativeButton("Quay l·∫°i", (dialog, which) -> showEventTypeDialog());
        builder.show();
    }
    
    /**
     * Dialog t·∫°o schedule (ƒë√£ ƒë∆∞·ª£c thay th·∫ø b·ªüi showCreateWorkoutScheduleDialog v√† showCreateMealScheduleDialog)
     * @deprecated S·ª≠ d·ª•ng showCreateWorkoutScheduleDialog() ho·∫∑c showCreateMealScheduleDialog()
     */
    @Deprecated
    private void showCreatePlanDialog() {
        // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn dialog t·∫°o workout schedule
        showCreateWorkoutScheduleDialog();
    }
    
    private void showCreateWorkoutDialog() {
        View dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_create_workout, null);
        
        EditText etWorkoutName = dialogView.findViewById(R.id.etWorkoutName);
        EditText etDescription = dialogView.findViewById(R.id.etDescription);
        EditText etWorkoutType = dialogView.findViewById(R.id.etWorkoutType);
        EditText etCalories = dialogView.findViewById(R.id.etCalories);
        EditText etDuration = dialogView.findViewById(R.id.etDuration);
        EditText etDifficulty = dialogView.findViewById(R.id.etDifficulty);
        
        // Update hints for new API
        etWorkoutType.setHint("Lo·∫°i (HIIT, CARDIO, STRENGTH, etc.)");
        etCalories.setHint("Calories ƒë·ªët ch√°y");
        etDuration.setHint("Th·ªùi gian (ph√∫t)");
        etDifficulty.setHint("Danh s√°ch b√†i t·∫≠p (t·∫°m th·ªùi ƒë·ªÉ tr·ªëng)");
        
        new AlertDialog.Builder(this)
                .setView(dialogView)
                .setTitle("T·∫°o b√†i t·∫≠p")
                .setPositiveButton("T·∫°o", (dialog, which) -> {
                    String name = etWorkoutName.getText().toString().trim();
                    String description = etDescription.getText().toString().trim();
                    String type = etWorkoutType.getText().toString().trim();
                    String caloriesStr = etCalories.getText().toString().trim();
                    String durationStr = etDuration.getText().toString().trim();
                    
                    if (!name.isEmpty() && !type.isEmpty()) {
                        try {
                            int calories = caloriesStr.isEmpty() ? 0 : Integer.parseInt(caloriesStr);
                            int duration = durationStr.isEmpty() ? 0 : Integer.parseInt(durationStr);
                            
                            // TODO: Trong th·ª±c t·∫ø, c·∫ßn dialog ri√™ng ƒë·ªÉ ch·ªçn exercises
                            // Hi·ªán t·∫°i t·∫°o empty list
                            java.util.List<com.example.heath_android.data.model.schedule.Exercise> exercises = new java.util.ArrayList<>();
                            
                            viewModel.createWorkout(name, description, type, duration, calories, exercises);
                            Toast.makeText(this, "ƒêang t·∫°o b√†i t·∫≠p...", Toast.LENGTH_SHORT).show();
                        } catch (NumberFormatException e) {
                            Toast.makeText(this, "Calories v√† th·ªùi gian ph·∫£i l√† s·ªë", Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        Toast.makeText(this, "Vui l√≤ng nh·∫≠p t√™n b√†i t·∫≠p v√† lo·∫°i", Toast.LENGTH_SHORT).show();
                    }
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }
    
    private void showCreateMealDialog() {
        View dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_create_meal, null);
        
        EditText etMealName = dialogView.findViewById(R.id.etMealName);
        EditText etDescription = dialogView.findViewById(R.id.etDescription);
        EditText etMealType = dialogView.findViewById(R.id.etMealType);
        EditText etCalories = dialogView.findViewById(R.id.etCalories);
        
        // Update hints for meal context (th·ª±c ƒë∆°n)
        etMealName.setHint("T√™n th·ª±c ƒë∆°n");
        etMealType.setHint("Lo·∫°i (BREAKFAST, LUNCH, DINNER, SNACK)");
        etCalories.setHint("Calories");
        
        new AlertDialog.Builder(this)
                .setView(dialogView)
                .setTitle("T·∫°o th·ª±c ƒë∆°n")
                .setPositiveButton("T·∫°o", (dialog, which) -> {
                    String name = etMealName.getText().toString().trim();
                    String description = etDescription.getText().toString().trim();
                    String type = etMealType.getText().toString().trim();
                    
                    if (!name.isEmpty() && !type.isEmpty()) {
                        // TODO: Trong th·ª±c t·∫ø, c·∫ßn dialog ri√™ng ƒë·ªÉ ch·ªçn foods
                        // Hi·ªán t·∫°i t·∫°o empty list
                        java.util.List<com.example.heath_android.data.model.schedule.Food> foods = new java.util.ArrayList<>();
                        
                        viewModel.createMeal(name, description, type, foods);
                        Toast.makeText(this, "ƒêang t·∫°o th·ª±c ƒë∆°n...", Toast.LENGTH_SHORT).show();
                    } else {
                        Toast.makeText(this, "Vui l√≤ng nh·∫≠p t√™n th·ª±c ƒë∆°n v√† lo·∫°i", Toast.LENGTH_SHORT).show();
                    }
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }
    
    /**
     * Dialog th√™m scheduled meal (legacy method - ƒë√£ ƒë∆∞·ª£c thay th·∫ø)
     * @deprecated S·ª≠ d·ª•ng showCreateScheduledMealDialog() v·ªõi API m·ªõi
     */
    @Deprecated
    private void showAddScheduledMealDialog() {
        // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn dialog m·ªõi v·ªõi API chu·∫©n
        showCreateScheduledMealDialog();
    }
    
    /**
     * Dialog l√™n l·ªãch session (legacy method - ƒë√£ ƒë∆∞·ª£c thay th·∫ø)
     * @deprecated S·ª≠ d·ª•ng showCreateScheduledWorkoutDialog() v·ªõi API m·ªõi
     */
    @Deprecated
    private void showScheduleSessionDialog() {
        // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn dialog m·ªõi v·ªõi API chu·∫©n
        showCreateScheduledWorkoutDialog();
    }
    
    private void showAddMealEventDialog() {
        View dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_add_event, null);
        
        EditText etTime = dialogView.findViewById(R.id.etTime);
        EditText etName = dialogView.findViewById(R.id.etName);
        EditText etDescription = dialogView.findViewById(R.id.etDescription);
        EditText etCalories = dialogView.findViewById(R.id.etCalories);
        EditText etType = dialogView.findViewById(R.id.etType);
        
        // Set hints cho meal context
        etName.setHint("T√™n b·ªØa ƒÉn");
        etType.setHint("Lo·∫°i (Breakfast, Lunch, Dinner, Snack)");
        
        new AlertDialog.Builder(this)
                .setView(dialogView)
                .setTitle("Th√™m b·ªØa ƒÉn v√†o l·ªãch")
                .setPositiveButton("Th√™m", (dialog, which) -> {
                    String time = etTime.getText().toString().trim();
                    String name = etName.getText().toString().trim();
                    String description = etDescription.getText().toString().trim();
                    String calories = etCalories.getText().toString().trim();
                    String type = etType.getText().toString().trim();
                    
                    if (!time.isEmpty() && !name.isEmpty()) {
                        // TODO: Implement createDayEvent ho·∫∑c chuy·ªÉn ƒë·∫øn create scheduled meal
                        // viewModel.createDayEvent(time, name, description, calories, type.isEmpty() ? "Meal" : type);
                        Toast.makeText(this, "T√≠nh nƒÉng n√†y ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Vui l√≤ng s·ª≠ d·ª•ng 'L√™n l·ªãch b·ªØa ƒÉn' t·ª´ menu ch√≠nh.", Toast.LENGTH_LONG).show();
                    } else {
                        Toast.makeText(this, "Vui l√≤ng nh·∫≠p th·ªùi gian v√† t√™n b·ªØa ƒÉn", Toast.LENGTH_SHORT).show();
                    }
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }
    
    private void showAddWorkoutEventDialog() {
        View dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_add_event, null);
        
        EditText etTime = dialogView.findViewById(R.id.etTime);
        EditText etName = dialogView.findViewById(R.id.etName);
        EditText etDescription = dialogView.findViewById(R.id.etDescription);
        EditText etCalories = dialogView.findViewById(R.id.etCalories);
        EditText etType = dialogView.findViewById(R.id.etType);
        
        // Set hints cho workout context
        etName.setHint("T√™n bu·ªïi t·∫≠p");
        etType.setHint("Lo·∫°i (Cardio, Strength, Yoga, etc.)");
        etCalories.setHint("Calories ti√™u th·ª• d·ª± ki·∫øn");
        
        new AlertDialog.Builder(this)
                .setView(dialogView)
                .setTitle("Th√™m bu·ªïi t·∫≠p v√†o l·ªãch")
                .setPositiveButton("Th√™m", (dialog, which) -> {
                    String time = etTime.getText().toString().trim();
                    String name = etName.getText().toString().trim();
                    String description = etDescription.getText().toString().trim();
                    String calories = etCalories.getText().toString().trim();
                    String type = etType.getText().toString().trim();
                    
                    if (!time.isEmpty() && !name.isEmpty()) {
                        // TODO: Implement createDayEvent ho·∫∑c chuy·ªÉn ƒë·∫øn create scheduled workout
                        // viewModel.createDayEvent(time, name, description, calories, type.isEmpty() ? "Workout" : type);
                        Toast.makeText(this, "T√≠nh nƒÉng n√†y ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Vui l√≤ng s·ª≠ d·ª•ng 'L√™n l·ªãch bu·ªïi t·∫≠p' t·ª´ menu ch√≠nh.", Toast.LENGTH_LONG).show();
                    } else {
                        Toast.makeText(this, "Vui l√≤ng nh·∫≠p th·ªùi gian v√† t√™n bu·ªïi t·∫≠p", Toast.LENGTH_SHORT).show();
                    }
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }
    
    private void showEditEventDialog(DayEvent event) {
        View dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_add_event, null);
        
        EditText etTime = dialogView.findViewById(R.id.etTime);
        EditText etName = dialogView.findViewById(R.id.etName);
        EditText etDescription = dialogView.findViewById(R.id.etDescription);
        EditText etCalories = dialogView.findViewById(R.id.etCalories);
        EditText etType = dialogView.findViewById(R.id.etType);
        
        // Pre-fill with existing data
        etTime.setText(event.getTime());
        etName.setText(event.getName());
        etDescription.setText(event.getDescription());
        etCalories.setText(String.valueOf(event.getCalories()));
        etType.setText(event.getType());
        
        new AlertDialog.Builder(this)
                .setView(dialogView)
                .setTitle("Ch·ªânh s·ª≠a s·ª± ki·ªán")
                .setPositiveButton("C·∫≠p nh·∫≠t", (dialog, which) -> {
                    String time = etTime.getText().toString().trim();
                    String name = etName.getText().toString().trim();
                    String description = etDescription.getText().toString().trim();
                    String calories = etCalories.getText().toString().trim();
                    String type = etType.getText().toString().trim();
                    
                    if (!time.isEmpty() && !name.isEmpty()) {
                        // TODO: Implement updateDayEvent ho·∫∑c chuy·ªÉn ƒë·∫øn update scheduled meal/workout
                        // viewModel.updateDayEvent(event.getId(), time, name, description, calories, type);
                        Toast.makeText(this, "T√≠nh nƒÉng ch·ªânh s·ª≠a ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Vui l√≤ng x√≥a v√† t·∫°o l·∫°i.", Toast.LENGTH_LONG).show();
                    } else {
                        Toast.makeText(this, "Vui l√≤ng nh·∫≠p th·ªùi gian v√† t√™n s·ª± ki·ªán", Toast.LENGTH_SHORT).show();
                    }
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }
    
    private void showDeleteEventDialog(DayEvent event) {
        String eventTypeName = event.getType() != null && event.getType().toLowerCase().contains("meal") ? "b·ªØa ƒÉn" : "bu·ªïi t·∫≠p";
        
        new AlertDialog.Builder(this)
                .setTitle("X√≥a " + eventTypeName)
                .setMessage("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a " + eventTypeName + " \"" + event.getName() + "\"?")
                .setPositiveButton("X√≥a", (dialog, which) -> {
                    // TODO: Implement deleteDayEvent ho·∫∑c chuy·ªÉn ƒë·∫øn delete scheduled meal/workout
                    // viewModel.deleteDayEvent(event.getId(), event.getType());
                    Toast.makeText(this, "T√≠nh nƒÉng x√≥a ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Vui l√≤ng s·ª≠ d·ª•ng API scheduled meal/workout.", Toast.LENGTH_LONG).show();
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }
    
    // ==================== SCHEDULE LIST DIALOGS ====================
    
    /**
     * Dialog hi·ªÉn th·ªã danh s√°ch workout schedules v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø
     */
    private void showWorkoutScheduleListDialog() {
        // L·∫•y danh s√°ch schedules t·ª´ ViewModel
        if (viewModel.getWorkoutSchedules().getValue() == null || viewModel.getWorkoutSchedules().getValue().isEmpty()) {
            Toast.makeText(this, "Ch∆∞a c√≥ l·ªãch t·∫≠p n√†o. H√£y t·∫°o l·ªãch t·∫≠p m·ªõi!", Toast.LENGTH_SHORT).show();
            showCreateWorkoutScheduleDialog();
            return;
        }
        
        // T·∫°o array v·ªõi th√¥ng tin schedule ƒë·ªÉ hi·ªÉn th·ªã
        java.util.List<com.example.heath_android.data.model.schedule.WorkoutSchedulesResponse> schedules = 
            viewModel.getWorkoutSchedules().getValue();
        
        String[] scheduleNames = new String[schedules.size()];
        for (int i = 0; i < schedules.size(); i++) {
            com.example.heath_android.data.model.schedule.WorkoutSchedulesResponse schedule = schedules.get(i);
            scheduleNames[i] = "üìã " + schedule.getName() + 
                             "\n   " + schedule.getStartDate() + " ‚Üí " + schedule.getEndDate() + 
                             "\n   " + schedule.getDescription();
        }
        
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Ch·ªçn l·ªãch t·∫≠p luy·ªán");
        
        builder.setItems(scheduleNames, (dialog, which) -> {
            // User ch·ªçn m·ªôt schedule
            com.example.heath_android.data.model.schedule.WorkoutSchedulesResponse selectedSchedule = schedules.get(which);
            viewModel.selectWorkoutSchedule(selectedSchedule);
            
            Toast.makeText(this, "ƒê√£ ch·ªçn l·ªãch: " + selectedSchedule.getName(), Toast.LENGTH_SHORT).show();
            
            // Hi·ªÉn th·ªã menu cho schedule ƒë√£ ch·ªçn
            showSelectedWorkoutScheduleMenu(selectedSchedule);
        });
        
        builder.setNegativeButton("Quay l·∫°i", (dialog, which) -> showWorkoutScheduleBrowseDialog());
        builder.setNeutralButton("T·∫°o m·ªõi", (dialog, which) -> showCreateWorkoutScheduleDialog());
        builder.show();
    }
    
    /**
     * Dialog hi·ªÉn th·ªã danh s√°ch meal schedules v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø
     */
    private void showMealScheduleListDialog() {
        // L·∫•y danh s√°ch schedules t·ª´ ViewModel
        if (viewModel.getMealSchedules().getValue() == null || viewModel.getMealSchedules().getValue().isEmpty()) {
            Toast.makeText(this, "Ch∆∞a c√≥ l·ªãch ƒÉn n√†o. H√£y t·∫°o l·ªãch ƒÉn m·ªõi!", Toast.LENGTH_SHORT).show();
            showCreateMealScheduleDialog();
            return;
        }
        
        // T·∫°o array v·ªõi th√¥ng tin schedule ƒë·ªÉ hi·ªÉn th·ªã
        java.util.List<com.example.heath_android.data.model.schedule.MealSchedulesResponse> schedules = 
            viewModel.getMealSchedules().getValue();
        
        String[] scheduleNames = new String[schedules.size()];
        for (int i = 0; i < schedules.size(); i++) {
            com.example.heath_android.data.model.schedule.MealSchedulesResponse schedule = schedules.get(i);
            scheduleNames[i] = "üçΩÔ∏è " + schedule.getName() + 
                             "\n   " + schedule.getStartDate() + " ‚Üí " + schedule.getEndDate() + 
                             "\n   " + schedule.getDescription();
        }
        
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Ch·ªçn l·ªãch ƒÉn u·ªëng");
        
        builder.setItems(scheduleNames, (dialog, which) -> {
            // User ch·ªçn m·ªôt schedule
            com.example.heath_android.data.model.schedule.MealSchedulesResponse selectedSchedule = schedules.get(which);
            viewModel.selectMealSchedule(selectedSchedule);
            
            Toast.makeText(this, "ƒê√£ ch·ªçn l·ªãch: " + selectedSchedule.getName(), Toast.LENGTH_SHORT).show();
            
            // Hi·ªÉn th·ªã menu cho schedule ƒë√£ ch·ªçn
            showSelectedMealScheduleMenu(selectedSchedule);
        });
        
        builder.setNegativeButton("Quay l·∫°i", (dialog, which) -> showMealScheduleBrowseDialog());
        builder.setNeutralButton("T·∫°o m·ªõi", (dialog, which) -> showCreateMealScheduleDialog());
        builder.show();
    }
    
    /**
     * Menu cho workout schedule ƒë√£ ƒë∆∞·ª£c ch·ªçn
     */
    private void showSelectedWorkoutScheduleMenu(com.example.heath_android.data.model.schedule.WorkoutSchedulesResponse schedule) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("L·ªãch t·∫≠p: " + schedule.getName());
        
        String[] options = {
            "üìÖ Xem bu·ªïi t·∫≠p ƒë√£ l√™n l·ªãch",
            "‚ûï Th√™m bu·ªïi t·∫≠p m·ªõi", 
            "‚úèÔ∏è Ch·ªânh s·ª≠a l·ªãch t·∫≠p",
            "üóëÔ∏è X√≥a l·ªãch t·∫≠p",
            "üìä Th·ªëng k√™"
        };
        
        builder.setItems(options, (dialog, which) -> {
            switch (which) {
                case 0:
                    // Load v√† hi·ªÉn th·ªã scheduled workouts
                    viewModel.loadScheduledWorkoutsByScheduleId(schedule.getId());
                    Toast.makeText(this, "ƒêang t·∫£i danh s√°ch bu·ªïi t·∫≠p...", Toast.LENGTH_SHORT).show();
                    break;
                case 1:
                    showCreateScheduledWorkoutDialog();
                    break;
                case 2:
                    showEditWorkoutScheduleDialog(schedule);
                    break;
                case 3:
                    showDeleteWorkoutScheduleDialog(schedule);
                    break;
                case 4:
                    Toast.makeText(this, "T√≠nh nƒÉng th·ªëng k√™ ƒëang ph√°t tri·ªÉn", Toast.LENGTH_SHORT).show();
                    break;
            }
        });
        
        builder.setNegativeButton("Quay l·∫°i", (dialog, which) -> showWorkoutScheduleListDialog());
        builder.show();
    }
    
    /**
     * Menu cho meal schedule ƒë√£ ƒë∆∞·ª£c ch·ªçn
     */
    private void showSelectedMealScheduleMenu(com.example.heath_android.data.model.schedule.MealSchedulesResponse schedule) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("L·ªãch ƒÉn: " + schedule.getName());
        
        String[] options = {
            "üìÖ Xem b·ªØa ƒÉn ƒë√£ l√™n l·ªãch",
            "‚ûï Th√™m b·ªØa ƒÉn m·ªõi",
            "‚úèÔ∏è Ch·ªânh s·ª≠a l·ªãch ƒÉn", 
            "üóëÔ∏è X√≥a l·ªãch ƒÉn",
            "üìä Th·ªëng k√™ dinh d∆∞·ª°ng"
        };
        
        builder.setItems(options, (dialog, which) -> {
            switch (which) {
                case 0:
                    // Load v√† hi·ªÉn th·ªã scheduled meals
                    viewModel.loadScheduledMealsByScheduleId(schedule.getId());
                    Toast.makeText(this, "ƒêang t·∫£i danh s√°ch b·ªØa ƒÉn...", Toast.LENGTH_SHORT).show();
                    break;
                case 1:
                    showCreateScheduledMealDialog();
                    break;
                case 2:
                    showEditMealScheduleDialog(schedule);
                    break;
                case 3:
                    showDeleteMealScheduleDialog(schedule);
                    break;
                case 4:
                    Toast.makeText(this, "T√≠nh nƒÉng th·ªëng k√™ ƒëang ph√°t tri·ªÉn", Toast.LENGTH_SHORT).show();
                    break;
            }
        });
        
        builder.setNegativeButton("Quay l·∫°i", (dialog, which) -> showMealScheduleListDialog());
        builder.show();
    }
    
    // ==================== SCHEDULE EDIT/DELETE DIALOGS ====================
    
    /**
     * Dialog ch·ªânh s·ª≠a workout schedule
     */
    private void showEditWorkoutScheduleDialog(com.example.heath_android.data.model.schedule.WorkoutSchedulesResponse schedule) {
        View dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_create_plan, null);
        
        EditText etPlanName = dialogView.findViewById(R.id.etPlanName);
        EditText etPlanDescription = dialogView.findViewById(R.id.etPlanDescription);
        EditText etUserId = dialogView.findViewById(R.id.etUserId);
        EditText etStartDate = dialogView.findViewById(R.id.etStartDate);
        EditText etEndDate = dialogView.findViewById(R.id.etEndDate);
        
        // Hide userId field
        etUserId.setVisibility(View.GONE);
        
        // Pre-fill v·ªõi d·ªØ li·ªáu hi·ªán t·∫°i
        etPlanName.setText(schedule.getName());
        etPlanDescription.setText(schedule.getDescription());
        etStartDate.setText(schedule.getStartDate());
        etEndDate.setText(schedule.getEndDate());
        
        new AlertDialog.Builder(this)
                .setView(dialogView)
                .setTitle("Ch·ªânh s·ª≠a l·ªãch t·∫≠p: " + schedule.getName())
                .setPositiveButton("C·∫≠p nh·∫≠t", (dialog, which) -> {
                    String name = etPlanName.getText().toString().trim();
                    String description = etPlanDescription.getText().toString().trim();
                    String startDate = etStartDate.getText().toString().trim();
                    String endDate = etEndDate.getText().toString().trim();
                    
                    if (!name.isEmpty() && !startDate.isEmpty() && !endDate.isEmpty()) {
                        viewModel.updateWorkoutSchedule(schedule.getId(), name, description, startDate, endDate);
                        Toast.makeText(this, "ƒêang c·∫≠p nh·∫≠t l·ªãch t·∫≠p...", Toast.LENGTH_SHORT).show();
                    } else {
                        Toast.makeText(this, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin", Toast.LENGTH_SHORT).show();
                    }
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }
    
    /**
     * Dialog ch·ªânh s·ª≠a meal schedule
     */
    private void showEditMealScheduleDialog(com.example.heath_android.data.model.schedule.MealSchedulesResponse schedule) {
        View dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_create_plan, null);
        
        EditText etPlanName = dialogView.findViewById(R.id.etPlanName);
        EditText etPlanDescription = dialogView.findViewById(R.id.etPlanDescription);
        EditText etUserId = dialogView.findViewById(R.id.etUserId);
        EditText etStartDate = dialogView.findViewById(R.id.etStartDate);
        EditText etEndDate = dialogView.findViewById(R.id.etEndDate);
        
        // Hide userId field
        etUserId.setVisibility(View.GONE);
        
        // Pre-fill v·ªõi d·ªØ li·ªáu hi·ªán t·∫°i
        etPlanName.setText(schedule.getName());
        etPlanDescription.setText(schedule.getDescription());
        etStartDate.setText(schedule.getStartDate());
        etEndDate.setText(schedule.getEndDate());
        
        new AlertDialog.Builder(this)
                .setView(dialogView)
                .setTitle("Ch·ªânh s·ª≠a l·ªãch ƒÉn: " + schedule.getName())
                .setPositiveButton("C·∫≠p nh·∫≠t", (dialog, which) -> {
                    String name = etPlanName.getText().toString().trim();
                    String description = etPlanDescription.getText().toString().trim();
                    String startDate = etStartDate.getText().toString().trim();
                    String endDate = etEndDate.getText().toString().trim();
                    
                    if (!name.isEmpty() && !startDate.isEmpty() && !endDate.isEmpty()) {
                        viewModel.updateMealSchedule(schedule.getId(), name, description, startDate, endDate);
                        Toast.makeText(this, "ƒêang c·∫≠p nh·∫≠t l·ªãch ƒÉn...", Toast.LENGTH_SHORT).show();
                    } else {
                        Toast.makeText(this, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin", Toast.LENGTH_SHORT).show();
                    }
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }
    
    /**
     * Dialog x√°c nh·∫≠n x√≥a workout schedule
     */
    private void showDeleteWorkoutScheduleDialog(com.example.heath_android.data.model.schedule.WorkoutSchedulesResponse schedule) {
        new AlertDialog.Builder(this)
                .setTitle("X√≥a l·ªãch t·∫≠p")
                .setMessage("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a l·ªãch t·∫≠p \"" + schedule.getName() + "\"?\n\nT·∫•t c·∫£ bu·ªïi t·∫≠p ƒë√£ l√™n l·ªãch trong l·ªãch n√†y c≈©ng s·∫Ω b·ªã x√≥a!")
                .setPositiveButton("X√≥a", (dialog, which) -> {
                    viewModel.deleteWorkoutSchedule(schedule.getId());
                    Toast.makeText(this, "ƒêang x√≥a l·ªãch t·∫≠p...", Toast.LENGTH_SHORT).show();
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }
    
    /**
     * Dialog x√°c nh·∫≠n x√≥a meal schedule
     */
    private void showDeleteMealScheduleDialog(com.example.heath_android.data.model.schedule.MealSchedulesResponse schedule) {
        new AlertDialog.Builder(this)
                .setTitle("X√≥a l·ªãch ƒÉn")
                .setMessage("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a l·ªãch ƒÉn \"" + schedule.getName() + "\"?\n\nT·∫•t c·∫£ b·ªØa ƒÉn ƒë√£ l√™n l·ªãch trong l·ªãch n√†y c≈©ng s·∫Ω b·ªã x√≥a!")
                .setPositiveButton("X√≥a", (dialog, which) -> {
                    viewModel.deleteMealSchedule(schedule.getId());
                    Toast.makeText(this, "ƒêang x√≥a l·ªãch ƒÉn...", Toast.LENGTH_SHORT).show();
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }

    // ==================== NEW SCHEDULE CREATION DIALOGS ====================
    
    /**
     * Dialog t·∫°o workout schedule m·ªõi
     */
    private void showCreateWorkoutScheduleDialog() {
        View dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_create_plan, null);
        
        EditText etPlanName = dialogView.findViewById(R.id.etPlanName);
        EditText etPlanDescription = dialogView.findViewById(R.id.etPlanDescription);
        EditText etUserId = dialogView.findViewById(R.id.etUserId);
        EditText etStartDate = dialogView.findViewById(R.id.etStartDate);
        EditText etEndDate = dialogView.findViewById(R.id.etEndDate);
        
        // Hide userId field since it's auto-filled from authentication
        etUserId.setVisibility(View.GONE);
        
        // Set hints for workout schedule
        etPlanName.setHint("T√™n l·ªãch t·∫≠p (vd: L·ªãch t·∫≠p Gym th√°ng 1)");
        etPlanDescription.setHint("M√¥ t·∫£ l·ªãch t·∫≠p");
        etStartDate.setHint("Ng√†y b·∫Øt ƒë·∫ßu (yyyy-MM-dd)");
        etEndDate.setHint("Ng√†y k·∫øt th√∫c (yyyy-MM-dd)");
        
        new AlertDialog.Builder(this)
                .setView(dialogView)
                .setTitle("T·∫°o l·ªãch t·∫≠p luy·ªán")
                .setPositiveButton("T·∫°o", (dialog, which) -> {
                    String name = etPlanName.getText().toString().trim();
                    String description = etPlanDescription.getText().toString().trim();
                    String startDate = etStartDate.getText().toString().trim();
                    String endDate = etEndDate.getText().toString().trim();
                    
                    if (!name.isEmpty() && !startDate.isEmpty() && !endDate.isEmpty()) {
                        viewModel.createWorkoutSchedule(name, description, startDate, endDate);
                        Toast.makeText(this, "ƒêang t·∫°o l·ªãch t·∫≠p...", Toast.LENGTH_SHORT).show();
                    } else {
                        Toast.makeText(this, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc", Toast.LENGTH_SHORT).show();
                    }
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }
    
    /**
     * Dialog t·∫°o meal schedule m·ªõi
     */
    private void showCreateMealScheduleDialog() {
        View dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_create_plan, null);
        
        EditText etPlanName = dialogView.findViewById(R.id.etPlanName);
        EditText etPlanDescription = dialogView.findViewById(R.id.etPlanDescription);
        EditText etUserId = dialogView.findViewById(R.id.etUserId);
        EditText etStartDate = dialogView.findViewById(R.id.etStartDate);
        EditText etEndDate = dialogView.findViewById(R.id.etEndDate);
        
        // Hide userId field since it's auto-filled from authentication
        etUserId.setVisibility(View.GONE);
        
        // Set hints for meal schedule
        etPlanName.setHint("T√™n l·ªãch ƒÉn (vd: L·ªãch ƒÉn ki√™ng th√°ng 1)");
        etPlanDescription.setHint("M√¥ t·∫£ l·ªãch ƒÉn");
        etStartDate.setHint("Ng√†y b·∫Øt ƒë·∫ßu (yyyy-MM-dd)");
        etEndDate.setHint("Ng√†y k·∫øt th√∫c (yyyy-MM-dd)");
        
        new AlertDialog.Builder(this)
                .setView(dialogView)
                .setTitle("T·∫°o l·ªãch ƒÉn u·ªëng")
                .setPositiveButton("T·∫°o", (dialog, which) -> {
                    String name = etPlanName.getText().toString().trim();
                    String description = etPlanDescription.getText().toString().trim();
                    String startDate = etStartDate.getText().toString().trim();
                    String endDate = etEndDate.getText().toString().trim();
                    
                    if (!name.isEmpty() && !startDate.isEmpty() && !endDate.isEmpty()) {
                        viewModel.createMealSchedule(name, description, startDate, endDate);
                        Toast.makeText(this, "ƒêang t·∫°o l·ªãch ƒÉn...", Toast.LENGTH_SHORT).show();
                    } else {
                        Toast.makeText(this, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc", Toast.LENGTH_SHORT).show();
                    }
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }
    
    /**
     * Dialog t·∫°o scheduled workout (l√™n l·ªãch bu·ªïi t·∫≠p c·ª• th·ªÉ)
     */
    private void showCreateScheduledWorkoutDialog() {
        View dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_schedule_session, null);
        
        EditText etWorkoutId = dialogView.findViewById(R.id.etWorkoutId);
        EditText etPlanId = dialogView.findViewById(R.id.etPlanId);
        EditText etStartTime = dialogView.findViewById(R.id.etStartTime);
        EditText etEndTime = dialogView.findViewById(R.id.etEndTime);
        EditText etStatus = dialogView.findViewById(R.id.etStatus);
        
        // Update hints for scheduled workout
        etWorkoutId.setHint("ID B√†i t·∫≠p (workout ID)");
        etPlanId.setHint("ID L·ªãch t·∫≠p (schedule ID)");
        etStartTime.setHint("Th·ªùi gian (yyyy-MM-ddTHH:mm:ss)");
        etEndTime.setHint("Ghi ch√∫");
        etStatus.setHint("Tr·∫°ng th√°i (SCHEDULED/COMPLETED/SKIPPED)");
        
        new AlertDialog.Builder(this)
                .setView(dialogView)
                .setTitle("L√™n l·ªãch bu·ªïi t·∫≠p")
                .setPositiveButton("T·∫°o", (dialog, which) -> {
                    String workoutId = etWorkoutId.getText().toString().trim();
                    String scheduleId = etPlanId.getText().toString().trim();
                    String scheduledDateTime = etStartTime.getText().toString().trim();
                    String notes = etEndTime.getText().toString().trim();
                    String status = etStatus.getText().toString().trim();
                    
                    if (!workoutId.isEmpty() && !scheduleId.isEmpty() && !scheduledDateTime.isEmpty()) {
                        try {
                            Long workoutIdLong = Long.parseLong(workoutId);
                            Long scheduleIdLong = Long.parseLong(scheduleId);
                            viewModel.createScheduledWorkout(scheduleIdLong, workoutIdLong, scheduledDateTime, 
                                                           status.isEmpty() ? "SCHEDULED" : status, notes);
                            Toast.makeText(this, "ƒêang l√™n l·ªãch bu·ªïi t·∫≠p...", Toast.LENGTH_SHORT).show();
                        } catch (NumberFormatException e) {
                            Toast.makeText(this, "ID ph·∫£i l√† s·ªë nguy√™n", Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        Toast.makeText(this, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc", Toast.LENGTH_SHORT).show();
                    }
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }
    
    /**
     * Dialog t·∫°o scheduled meal (l√™n l·ªãch b·ªØa ƒÉn c·ª• th·ªÉ)
     */
    private void showCreateScheduledMealDialog() {
        View dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_schedule_session, null);
        
        EditText etMealId = dialogView.findViewById(R.id.etWorkoutId);
        EditText etScheduleId = dialogView.findViewById(R.id.etPlanId);
        EditText etScheduledDateTime = dialogView.findViewById(R.id.etStartTime);
        EditText etNotes = dialogView.findViewById(R.id.etEndTime);
        EditText etStatus = dialogView.findViewById(R.id.etStatus);
        
        // Update hints for scheduled meal
        etMealId.setHint("ID Th·ª±c ƒë∆°n (meal ID)");
        etScheduleId.setHint("ID L·ªãch ƒÉn (schedule ID)");
        etScheduledDateTime.setHint("Th·ªùi gian (yyyy-MM-ddTHH:mm:ss)");
        etNotes.setHint("Ghi ch√∫");
        etStatus.setHint("Tr·∫°ng th√°i (SCHEDULED/COMPLETED/SKIPPED)");
        
        // Pre-fill schedule ID if a meal schedule is selected
        if (viewModel.getSelectedMealSchedule().getValue() != null) {
            etScheduleId.setText(String.valueOf(viewModel.getSelectedMealSchedule().getValue().getId()));
        }
        
        new AlertDialog.Builder(this)
                .setView(dialogView)
                .setTitle("L√™n l·ªãch b·ªØa ƒÉn")
                .setPositiveButton("T·∫°o", (dialog, which) -> {
                    String mealId = etMealId.getText().toString().trim();
                    String scheduleId = etScheduleId.getText().toString().trim();
                    String scheduledDateTime = etScheduledDateTime.getText().toString().trim();
                    String notes = etNotes.getText().toString().trim();
                    String status = etStatus.getText().toString().trim();
                    
                    if (!mealId.isEmpty() && !scheduleId.isEmpty() && !scheduledDateTime.isEmpty()) {
                        try {
                            Long mealIdLong = Long.parseLong(mealId);
                            Long scheduleIdLong = Long.parseLong(scheduleId);
                            viewModel.createScheduledMeal(scheduleIdLong, mealIdLong, scheduledDateTime, 
                                                        status.isEmpty() ? "SCHEDULED" : status, notes);
                            Toast.makeText(this, "ƒêang l√™n l·ªãch b·ªØa ƒÉn...", Toast.LENGTH_SHORT).show();
                        } catch (NumberFormatException e) {
                            Toast.makeText(this, "ID ph·∫£i l√† s·ªë nguy√™n", Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        Toast.makeText(this, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc", Toast.LENGTH_SHORT).show();
                    }
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }
    
    private void setupBottomNavigation() {
        if (bottomNavigation == null) {
            return;
        }
        
        // Set Schedule as selected (current activity)
        bottomNavigation.setSelectedItemId(R.id.nav_schedule);
        
        bottomNavigation.setOnItemSelectedListener(item -> {
            int itemId = item.getItemId();
            
            if (itemId == R.id.nav_home) {
                // Navigate to Home
                navigateToHome();
                return true;
            } else if (itemId == R.id.nav_profile) {
                // Navigate to Profile
                navigateToProfile();
                return true;
            } else if (itemId == R.id.nav_schedule) {
                // Already on Schedule, do nothing
                return true;
            } else if (itemId == R.id.nav_logout) {
                Toast.makeText(this, "Logout feature coming soon!", Toast.LENGTH_SHORT).show();
                return false;
            }
            
            return false;
        });
    }
    
    private void navigateToHome() {
        Intent intent = new Intent(this, HomeActivity.class);
        startActivity(intent);
    }

    private void navigateToProfile() {
        Intent intent = new Intent(this, ProfileActivity.class);
        startActivity(intent);
    }
}